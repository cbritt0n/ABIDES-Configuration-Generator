#!/usr/bin/env python3
"""
ABIDES Configuration Generator v1.0.0 - Agent Type Examples

This file demonstrates the 6 different agent types available in the generator.
Each agent type serves specific research and simulation purposes.

Generated by: ABIDES Configuration Generator v1.0.0
"""

import subprocess
import os
import sys

def generate_agent_example(agent_type, count, description, cli_arg):
    """Generate an example focusing on a specific agent type"""
    filename = f"{agent_type}_agent_example"
    base_args = "--zi 100"  # Always include base ZI agents
    command = f"python ../configgen.py -f {filename} {cli_arg} {count} {base_args} --symbol AAPL --verbose"
    
    print(f"\nü§ñ {agent_type} Agents - {description}")
    print(f"Command: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ Generated: {filename}.py")
        
        # Extract agent info from verbose output
        output_lines = result.stdout.split('\n')
        for line in output_lines:
            if 'Agent Composition' in line or 'Total Agents' in line or agent_type.title() in line:
                print(f"   {line.strip()}")
                
    else:
        print(f"‚ùå Error: {result.stderr}")

def main():
    """Generate examples for all 6 agent types"""
    print("ABIDES Configuration Generator v2.0.0 - Agent Type Examples")
    
    if not os.path.exists("../configgen.py"):
        print("‚ùå Error: configgen.py not found in parent directory")
        sys.exit(1)
    
    # Agent type examples - all 6 types
    agent_types = [
        ("market_maker", "10", "Provide liquidity and maintain spreads", "--mm"),
        ("adaptive_mm", "5", "Dynamic market making with adaptation", "--am"), 
        ("momentum", "12", "Trend-following algorithmic traders", "--mo"),
        ("zero_intelligence", "200", "Random trading without strategy", "--zi"),
        ("noise", "50", "Random activity and market disturbance", "--no"),
        ("value", "25", "Informed trading based on fundamental value", "--va")
    ]
    
    print(f"\nGenerating examples for all {len(agent_types)} agent types...\n")
    
    for agent_type, count, description, cli_arg in agent_types:
        generate_agent_example(agent_type, count, description, cli_arg)
    
    # Generate comprehensive multi-agent example
    print(f"\nüèÜ Comprehensive Multi-Agent Example")
    comprehensive_cmd = ("python ../configgen.py -f comprehensive_multi_agent "
                        "--mm 8 --am 4 --mo 10 --zi 200 --no 40 --va 20 "
                        "--symbol AAPL --verbose")
    print(f"Command: {comprehensive_cmd}")
    
    result = subprocess.run(comprehensive_cmd, shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print("‚úÖ Generated: comprehensive_multi_agent.py")
        
        # Show composition
        output_lines = result.stdout.split('\n')
        for line in output_lines:
            if any(keyword in line for keyword in ['Agent Composition', 'Total Agents', 'Market Maker', 'Adaptive', 'Momentum']):
                print(f"   {line.strip()}")
    else:
        print(f"‚ùå Error: {result.stderr}")
    
    print(f"\n{'='*70}")
    print("Agent Type Examples Complete!")
    print("\nGenerated Configurations:")
    
    # List all generated files
    all_files = [f"{agent}_agent_example.py" for agent, _, _, _ in agent_types]
    all_files.append("comprehensive_multi_agent.py")
    
    for filename in all_files:
        if os.path.exists(filename):
            print(f"  ‚úÖ {filename}")
        else:
            print(f"  ‚ùå {filename} (failed)")
    
    print(f"\nAgent Type Reference:")
    print("  ‚Ä¢ Market Maker (--mm): Liquidity providers, bid-ask spreads")
    print("  ‚Ä¢ Adaptive MM (--am): Dynamic market making, adaptive spreads")
    print("  ‚Ä¢ Momentum (--mo): Trend followers, algorithmic strategies") 
    print("  ‚Ä¢ Zero Intelligence (--zi): Random traders, baseline volume")
    print("  ‚Ä¢ Noise (--no): Random activity, market disturbance")
    print("  ‚Ä¢ Value (--va): Informed traders, fundamental analysis")
    
    print(f"\nUsage Notes:")
    print("‚Ä¢ Mix different agent types for realistic market dynamics")
    print("‚Ä¢ Higher ZI agent counts provide baseline trading volume")
    print("‚Ä¢ MM and AM agents provide market liquidity")
    print("‚Ä¢ MO and VA agents create informed trading patterns")
    print("‚Ä¢ NO agents add realistic market noise and volatility")
    print(f"{'='*70}")

if __name__ == "__main__":
    main()