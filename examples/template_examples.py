#!/usr/bin/env python3
"""
ABIDES Configuration Generator v1.0.0 - Template Examples

This file shows how to generate configurations using all 5 research templates.
Each template is designed for specific research applications.

Generated by: ABIDES Configuration Generator v1.0.0
"""

import subprocess
import os
import sys

def generate_template_example(template_name, description, additional_args=""):
    """Generate an example for a specific research template"""
    filename = f"{template_name}_template_example"
    command = f"python ../configgen.py --template {template_name} -f {filename} --symbol AAPL {additional_args}"
    
    print(f"\nüìä {template_name.upper()} Template - {description}")
    print(f"Command: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ Generated: {filename}.py")
        
        # Show some statistics about the generated file
        try:
            with open(f"{filename}.py", 'r') as f:
                content = f.read()
                lines = len(content.split('\n'))
                agent_count = content.count('agents.append') + content.count('agents.extend')
                
            print(f"   üìÑ File size: {lines} lines")
            print(f"   ü§ñ Agent definitions: ~{agent_count}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Could not analyze file: {e}")
            
    else:
        print(f"‚ùå Error generating {template_name}: {result.stderr}")

def main():
    """Generate examples for all research templates"""
    print("ABIDES Configuration Generator v2.0.0 - Research Template Examples")
    
    if not os.path.exists("../configgen.py"):
        print("‚ùå Error: configgen.py not found in parent directory")
        sys.exit(1)
    
    # Research template examples
    templates = [
        ("rmsc03", "JPMorgan research paper replication (2019)", "--mm 1 --zi 100"),
        ("rmsc04", "Enhanced RMSC with momentum agents", "--mm 5 --mo 12 --zi 200"),
        ("hft", "High-frequency trading simulation", "--mm 10 --mo 15 --zi 150"),
        ("behavioral", "Behavioral finance with psychological agents", "--va 25 --no 50 --zi 200"),
        ("minimal", "Baseline setup for RL and experimentation", "--mm 3 --zi 50 --gym-mode")
    ]
    
    print(f"\nGenerating examples for all {len(templates)} research templates...\n")
    
    for template, description, args in templates:
        generate_template_example(template, description, args)
    
    print(f"\n{'='*70}")
    print("Research Template Generation Complete!")
    print("\nGenerated Files:")
    
    # List generated files
    for template, _, _ in templates:
        filename = f"{template}_template_example.py"
        if os.path.exists(filename):
            print(f"  ‚úÖ {filename}")
        else:
            print(f"  ‚ùå {filename} (failed)")
    
    print(f"\nUsage:")
    print("1. Copy generated files to your ABIDES installation directory")
    print("2. Run with: python [filename].py")
    print("3. Check generated market data and logs")
    
    print(f"\nFor ABIDES-Gym integration:")
    print("1. Copy minimal_template_example.py to abides-gym directory")  
    print("2. Import and use in RL training loops")
    print(f"{'='*70}")

if __name__ == "__main__":
    main()